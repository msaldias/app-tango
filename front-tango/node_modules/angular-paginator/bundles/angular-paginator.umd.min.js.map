{"version":3,"sources":["../../../src/lib/services/angular-paginator.service.ts","../../../src/lib/angular-paginator.component.ts","../../../src/lib/pipes/angular-paginator.pipe.ts","../../../src/lib/directives/angular-paginator.directive.ts","../../../src/lib/angular-paginator.module.ts"],"names":["AngularPaginatorService","this","id","instances","change","EventEmitter","prototype","registerInstance","instance","updateInstance","emit","key","getInstance","getCurrentPage","currentPage","Injectable","AngularPaginatorComponent","angularPaginatorService","boundaryLinks","directionLinks","maxSize","rotate","boundaryLinkNumbers","forceEllipses","firstText","previousText","nextText","lastText","screenReaderFirstText","screenReaderPreviousText","screenReaderNextText","screenReaderLastText","screenReaderPageText","screenReaderCurrentPageText","screenReaderPaginationLabel","autoHide","disabled","pageChange","ngOnInit","className","Component","args","selector","template","changeDetection","ChangeDetectionStrategy","OnPush","Input","Output","AngularPaginatorPipe","transform","array","createInstance","start","itemsPerPage","end","slice","totalItems","length","Pipe","name","AngularPaginatorDirective","_this","firstPage","pages","subscription","subscribe","updatePages","toPreviousPage","setCurrentPage","toNextPage","lastPage","toFirstPage","toLastPage","page","makePage","pageNumber","text","isActive","number","active","getPages","totalPages","Math","ceil","startPage","endPage","isMaxSized","max","floor","min","push","previousPageSet","unshift","secondPageLink","firstPageLink","nextPageSet","secondToLastPageLink","lastPageLink","correctedCurrentPage","outOfBoundCorrection","isValidId","Error","ngOnDestroy","unsubscribe","Directive","exportAs","NgModule","imports","CommonModule","providers","declarations","exports"],"mappings":"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","sourcesContent":["import { Injectable, EventEmitter } from '@angular/core';\nimport { AngularPaginatorInstance } from '../others/angular-paginator.interface';\n\n@Injectable()\nexport class AngularPaginatorService {\n  /** id is used to identify pagination instances */\n  id = 'ANGULAR_PAGINATOR_DEFAULT';\n\n  /** instances is the collection of pagination componetns */\n  instances: any = {};\n\n  /** emits an event with instance id whenever the page number changes */\n  change: EventEmitter<string> = new EventEmitter<string>();\n\n  constructor() { }\n\n  /**\n   * creates an instance for every pipe differentiated with id\n   *\n   * @param instance each instance refers to a unique pagination component\n   */\n  registerInstance(instance: AngularPaginatorInstance): void {\n\n    if (!this.instances[instance.id]) {\n      this.instances[instance.id] = instance;\n      this.change.emit(instance.id);\n    } else {\n      const changed = this.updateInstance(instance);\n      if (changed) {\n        this.change.emit(instance.id);\n      }\n    }\n\n    return;\n  }\n\n  /**\n   * updates existing pagination instances available\n   * and returns true if value has changed\n   *\n   * @param instance an unique pagination component\n   */\n  updateInstance(instance: AngularPaginatorInstance): boolean {\n\n    for (const key in instance) {\n      if (instance[key] !== this.instances[instance.id][key]) {\n        this.instances[instance.id][key] = instance[key];\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  /**\n   * return instance with given id\n   *\n   * @param id unique id of the pagination component\n   */\n  getInstance(id: string): any {\n    return this.instances[id];\n  }\n\n  /**\n   * return currentPage for given id\n   *\n   * @param id unique id of the pagination component\n   */\n  getCurrentPage(id: string): number {\n    return this.instances[id].currentPage;\n  }\n}\n","import { Component, OnInit, ChangeDetectionStrategy, Input, Output, EventEmitter } from '@angular/core';\nimport { AngularPaginatorService } from './services/angular-paginator.service';\n\n/**\n * The component that renders the Pagination component template, It also accepts the inputs for the Pagination component\n */\n@Component({\n  selector: 'angular-paginator',\n  templateUrl: './angular-paginator.component.html',\n  styleUrls: ['./angular-paginator.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\n\nexport class AngularPaginatorComponent implements OnInit {\n\n  /**\n   * Whether to display First / Last buttons\n   */\n  @Input() boundaryLinks = false;\n  /**\n   * Whether to display Previous / Next buttons\n   */\n  @Input() directionLinks = true;\n  /**\n   * Limit number for pagination size, i.e., the maximum page numbers to be displayed\n   */\n  @Input() maxSize = 5;\n  /**\n   * Whether to keep current page in the middle of the visible ones\n   */\n  @Input() rotate = true;\n  /**\n   * Whether to always display the first and last page numbers.\n   * If max-size is smaller than the number of pages, then the first and last page numbers are still shown with ellipses\n   * in-between as necessary. NOTE: max-size refers to the center of the range.\n   * This option may add up to 2 more numbers on each side of the displayed range for the end value and\n   * what would be an ellipsis but is replaced by a number because it is sequential\n   */\n  @Input() boundaryLinkNumbers = false;\n  /**\n   * Also displays ellipses when rotate is true and maxSize is smaller than the number of pages forceEllipses\n   */\n  @Input() forceEllipses = false;\n  /**\n   * Use unique id when multiple paginations are being used on the same page.\n   * By Default Paginator uses id `ANGULAR_PAGINATOR_DEFAULT`\n   */\n  @Input() id: string;\n  /**\n   * Text for first button\n   */\n  @Input() firstText = 'First';\n  /**\n   * Text for previous button\n   */\n  @Input() previousText = 'Previous';\n  /**\n   * Text for next button\n   */\n  @Input() nextText = 'Next';\n  /**\n   * Text for last button\n   */\n  @Input() lastText = 'Last';\n  /**\n   * Screen reader text for first button\n   */\n  @Input() screenReaderFirstText = 'First';\n  /**\n   * Screen reader text for previous button\n   */\n  @Input() screenReaderPreviousText = 'Previous';\n  /**\n   * Screen reader text for next button\n   */\n  @Input() screenReaderNextText = 'Next';\n  /**\n   * Screen reader text for lasr button\n   */\n  @Input() screenReaderLastText = 'Last';\n  /**\n   * Screen reader text for page numbers\n   */\n  @Input() screenReaderPageText = 'Page';\n  /**\n   * Screen reader text for current page\n   */\n  @Input() screenReaderCurrentPageText = 'You`re on page';\n  /**\n   * Screen reader text for the pagination component\n   */\n  @Input() screenReaderPaginationLabel = 'Pagination';\n  /**\n   * Adds custom class to the pagination element\n   */\n  @Input() className: string;\n  /**\n   * Hides the pagination component if the items are less than `itemsPerPage`\n   */\n  @Input() autoHide = false;\n  /**\n   * disables pagination component\n   */\n  @Input() disabled = false;\n\n  /**\n   * Emits an event whenever the current page is changed, It emits the current page number\n   *\n   * This event is originally picked up from `AngularPaginatorDirective`\n   */\n  @Output() pageChange: EventEmitter<number> = new EventEmitter<number>();\n\n  /**\n   *\n   * @param angularPaginatorService service for angular paginator\n   */\n  constructor(private angularPaginatorService: AngularPaginatorService) { }\n\n  ngOnInit(): void {\n\n    // set default id if not provided\n    this.id = this.id ? this.id : this.angularPaginatorService.id;\n\n    // set default class if not provided\n    this.className = this.className ? this.className : this.angularPaginatorService.id;\n  }\n}\n","import { Pipe, PipeTransform } from '@angular/core';\nimport { AngularPaginatorService } from '../services/angular-paginator.service';\nimport { AngularPaginatorInstance } from '../others/angular-paginator.interface';\n\n/**\n * Pagination Pipe which paginates the array for the provided arguments such as `itemsPerPage` and `currentPage`\n */\n@Pipe({\n  name: 'angularPaginator'\n})\n\nexport class AngularPaginatorPipe implements PipeTransform {\n  /**\n   *\n   * @param angularPaginatorService service for angular pagiantor\n   */\n  constructor(private angularPaginatorService: AngularPaginatorService) { }\n\n  /**\n   * this pipes paginates the array for the provided arguments such as `itemsPerPage` and `currentPage`\n   *\n   * @param array input array for which the manipulation happens\n   * @param args input arguments for the paginator pipe\n   */\n  transform(array: any, args?: any): any {\n\n    const instance: AngularPaginatorInstance = this.createInstance(array, args);\n\n    // create pagination information\n    this.angularPaginatorService.registerInstance(instance);\n\n    // set the slicing range\n    const start = (instance.currentPage - 1) * instance.itemsPerPage;\n    const end = instance.currentPage * instance.itemsPerPage;\n\n    return array.slice(start, end);\n\n  }\n\n  /**\n   * create an instance for each pipe\n   *\n   * @param array input array for which the manipulation happens\n   * @param args input arguments for the paginator pipe\n   */\n  createInstance(array: any, args: any): any {\n    return {\n      id: args.id ? args.id : this.angularPaginatorService.id,\n      currentPage: args.currentPage ? args.currentPage : 1,\n      itemsPerPage: args.itemsPerPage ? args.itemsPerPage : 10,\n      totalItems: array.length\n    };\n  }\n}\n","import { Directive, OnInit, OnDestroy, Input, Output, EventEmitter } from '@angular/core';\nimport { AngularPaginatorService } from '../services/angular-paginator.service';\nimport { AngularPaginatorInstance, Page } from '../others/angular-paginator.interface';\nimport { Subscription } from 'rxjs';\n\n/**\n * This is the directive where the actual pagination takes place, it provides a sync between the\n * pipes and the pagination component\n */\n@Directive({\n  selector: 'angularPaginator, [angularPaginator]',\n  exportAs: 'angularPaginator'\n})\n\nexport class AngularPaginatorDirective implements OnInit, OnDestroy {\n\n  /**\n   * Whether to display First / Last buttons\n   */\n  @Input() boundaryLinks: boolean;\n  /**\n   * Whether to display Previous / Next buttons\n   */\n  @Input() directionLinks: boolean;\n  /**\n   * Limit number for pagination size, i.e., the maximum page numbers to be displayed\n   */\n  @Input() maxSize: number;\n  /**\n   * Whether to keep current page in the middle of the visible ones\n   */\n  @Input() rotate: boolean;\n  /**\n   * Whether to always display the first and last page numbers.\n   * If max-size is smaller than the number of pages, then the first and last page numbers are still shown with ellipses\n   * in-between as necessary. NOTE: max-size refers to the center of the range.\n   * This option may add up to 2 more numbers on each side of the displayed range for the end value and\n   * what would be an ellipsis but is replaced by a number because it is sequential\n   */\n  @Input() boundaryLinkNumbers: boolean;\n  /**\n   * Also displays ellipses when rotate is true and maxSize is smaller than the number of pages forceEllipses\n   */\n  @Input() forceEllipses: boolean;\n  /**\n   * Use unique id when multiple paginations are being used on the same page.\n   * By Default Paginator uses id `ANGULAR_PAGINATOR_DEFAULT`\n   */\n  @Input() id: string;\n\n  currentPage: number;\n  firstPage = 1;\n  lastPage: number;\n  pages: Page[] = [];\n\n  private subscription: Subscription;\n\n  /**\n   * Emits an event whenever the current page is changed, It emits the current page number\n   */\n  @Output() pageChange: EventEmitter<number> = new EventEmitter<number>(true);\n\n  /**\n   *\n   * @param angularPaginatorService serivce for angular paginator\n   */\n  constructor(private angularPaginatorService: AngularPaginatorService) {\n\n    // subscribe to changes\n    this.subscription = this.angularPaginatorService.change.subscribe((id: string) => {\n      if (id === this.id) {\n        this.updatePages();\n      }\n    });\n\n  }\n\n  /**\n   * Navigate to prevoius page\n   */\n  toPreviousPage(): void {\n    if (this.currentPage > this.firstPage) {\n      this.setCurrentPage(this.currentPage - 1);\n    }\n    return;\n  }\n\n  /**\n   * Navigate to next page\n   */\n  toNextPage(): void {\n    if (this.currentPage < this.lastPage) {\n      this.setCurrentPage(this.currentPage + 1);\n    }\n    return;\n  }\n\n  /**\n   * Navigate to first page\n   */\n  toFirstPage(): void {\n    this.setCurrentPage(this.firstPage);\n    return;\n  }\n\n  /**\n   * Navigate to last page\n   */\n  toLastPage(): void {\n    this.setCurrentPage(this.lastPage);\n    return;\n  }\n\n  /**\n   * Sets current page\n   *\n   * @param page page number to set as currentPage\n   */\n  setCurrentPage(page: number): void {\n    if (page && this.currentPage !== page) {\n      this.currentPage = page;\n      this.pageChange.emit(page);\n    }\n    return;\n  }\n\n  /**\n   * create page object used for template\n   *\n   * @param number page number\n   * @param text page number, text to be displayed\n   * @param isActive whether the page is active or not, true for currentPage\n   */\n  makePage(pageNumber: number, text: any, isActive: boolean): any {\n    return {\n      number: pageNumber,\n      text,\n      active: isActive\n    };\n  }\n\n  /**\n   *  create page array\n   *\n   * @param currentPage current page number\n   * @param itemsPerPage total items per page\n   * @param totalItems no of items for pagination, usually array length\n   */\n  getPages(currentPage: number, itemsPerPage: number, totalItems: number): any {\n    const pages: any = [];\n\n    // Default page limits\n    const totalPages: number = this.lastPage = Math.ceil(totalItems / itemsPerPage);\n\n    let startPage = 1;\n    let endPage: number = totalPages;\n    const isMaxSized: boolean = this.maxSize && this.maxSize < totalPages;\n\n    // recompute if maxSize\n    if (isMaxSized) {\n\n      if (this.rotate) {\n\n        // current page is displayed in the middle of the visible ones\n        startPage = Math.max(currentPage - Math.floor(this.maxSize / 2), 1);\n        endPage = startPage + this.maxSize - 1;\n\n        // Adjust if limit is exceeded\n        if (endPage > totalPages) {\n          endPage = totalPages;\n          startPage = endPage - this.maxSize + 1;\n        }\n      } else {\n        // Visible pages are paginated with maxSize\n        startPage = (Math.ceil(currentPage / this.maxSize) - 1) * this.maxSize + 1;\n\n        // adjust last page if limit is exceeded\n        endPage = Math.min(startPage + this.maxSize - 1, totalPages);\n      }\n    }\n\n    // add page number links\n    for (let pageNumber = startPage; pageNumber <= endPage; pageNumber++) {\n      const page = this.makePage(pageNumber, pageNumber, pageNumber === currentPage);\n      pages.push(page);\n    }\n\n    // add links to move between page sets\n    if (isMaxSized && this.maxSize > 0 && (!this.rotate || this.forceEllipses || this.boundaryLinkNumbers)) {\n      if (startPage > 1) {\n\n        // need ellipsis for all options unless range is too close to beginning\n        if (!this.boundaryLinkNumbers || startPage > 3) {\n          const previousPageSet = this.makePage(startPage - 1, '...', false);\n          pages.unshift(previousPageSet);\n        }\n\n        if (this.boundaryLinkNumbers) {\n\n          if (startPage === 3) { // need to replace ellipsis when the buttons would be sequential\n            const secondPageLink = this.makePage(2, '2', false);\n            pages.unshift(secondPageLink);\n          }\n\n          // add the first page\n          const firstPageLink = this.makePage(1, '1', false);\n          pages.unshift(firstPageLink);\n        }\n      }\n\n      if (endPage < totalPages) {\n\n        // need ellipsis for all options unless range is too close to end\n        if (!this.boundaryLinkNumbers || endPage < totalPages - 2) {\n          const nextPageSet = this.makePage(endPage + 1, '...', false);\n          pages.push(nextPageSet);\n        }\n\n        if (this.boundaryLinkNumbers) {\n\n          if (endPage === totalPages - 2) { // need to replace ellipsis when the buttons would be sequential\n            const secondToLastPageLink = this.makePage(totalPages - 1, totalPages - 1, false);\n            pages.push(secondToLastPageLink);\n          }\n\n          // add the last page\n          const lastPageLink = this.makePage(totalPages, totalPages, false);\n          pages.push(lastPageLink);\n        }\n      }\n    }\n    return pages;\n  }\n\n  /**\n   * Updates the pagination component\n   */\n  updatePages(): void {\n    const instance: AngularPaginatorInstance = this.angularPaginatorService.getInstance(this.id);\n\n    const correctedCurrentPage = this.outOfBoundCorrection(instance);\n\n    if (correctedCurrentPage !== instance.currentPage || this.currentPage !== instance.currentPage) {\n      this.setCurrentPage(correctedCurrentPage);\n    }\n\n    this.pages = this.getPages(instance.currentPage, instance.itemsPerPage, instance.totalItems);\n\n    return;\n  }\n\n  /**\n   * Check if currentPage is out of bound with totalPages\n   *\n   * @param instance instance for which the range is to be corrected\n   */\n  outOfBoundCorrection(instance: AngularPaginatorInstance): number {\n\n    const totalPages = Math.ceil(instance.totalItems / instance.itemsPerPage);\n\n    if (totalPages < instance.currentPage && 0 < totalPages) {\n      return totalPages;\n    } else if (instance.currentPage < 1) {\n      return 1;\n    }\n\n    return instance.currentPage;\n  }\n\n  /**\n   * check if there is any instance registered with the id\n   */\n  isValidId(): void {\n\n    if (!this.angularPaginatorService.getInstance(this.id)) {\n      throw new Error('There is no instance registered with id `' + this.id + '`');\n    }\n\n    return;\n  }\n\n  ngOnInit(): void {\n    this.isValidId();\n    this.updatePages();\n  }\n\n  ngOnDestroy(): void {\n    /** destroy the subscription when the directive is destroyed */\n    this.subscription.unsubscribe();\n  }\n\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { AngularPaginatorComponent } from './angular-paginator.component';\nimport { AngularPaginatorPipe } from './pipes/angular-paginator.pipe';\nimport { AngularPaginatorDirective } from './directives/angular-paginator.directive';\nimport { AngularPaginatorService } from './services/angular-paginator.service';\n\n@NgModule({\n  imports: [\n    CommonModule\n  ],\n  providers: [AngularPaginatorService],\n  declarations: [AngularPaginatorComponent, AngularPaginatorPipe, AngularPaginatorDirective],\n  exports: [AngularPaginatorComponent, AngularPaginatorPipe]\n})\n\nexport class AngularPaginatorModule { }\n"]}