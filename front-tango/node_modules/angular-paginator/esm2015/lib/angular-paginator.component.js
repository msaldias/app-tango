import { Component, ChangeDetectionStrategy, Input, Output, EventEmitter } from '@angular/core';
import { AngularPaginatorService } from './services/angular-paginator.service';
/**
 * The component that renders the Pagination component template, It also accepts the inputs for the Pagination component
 */
export class AngularPaginatorComponent {
    /**
     *
     * @param angularPaginatorService service for angular paginator
     */
    constructor(angularPaginatorService) {
        this.angularPaginatorService = angularPaginatorService;
        /**
         * Whether to display First / Last buttons
         */
        this.boundaryLinks = false;
        /**
         * Whether to display Previous / Next buttons
         */
        this.directionLinks = true;
        /**
         * Limit number for pagination size, i.e., the maximum page numbers to be displayed
         */
        this.maxSize = 5;
        /**
         * Whether to keep current page in the middle of the visible ones
         */
        this.rotate = true;
        /**
         * Whether to always display the first and last page numbers.
         * If max-size is smaller than the number of pages, then the first and last page numbers are still shown with ellipses
         * in-between as necessary. NOTE: max-size refers to the center of the range.
         * This option may add up to 2 more numbers on each side of the displayed range for the end value and
         * what would be an ellipsis but is replaced by a number because it is sequential
         */
        this.boundaryLinkNumbers = false;
        /**
         * Also displays ellipses when rotate is true and maxSize is smaller than the number of pages forceEllipses
         */
        this.forceEllipses = false;
        /**
         * Text for first button
         */
        this.firstText = 'First';
        /**
         * Text for previous button
         */
        this.previousText = 'Previous';
        /**
         * Text for next button
         */
        this.nextText = 'Next';
        /**
         * Text for last button
         */
        this.lastText = 'Last';
        /**
         * Screen reader text for first button
         */
        this.screenReaderFirstText = 'First';
        /**
         * Screen reader text for previous button
         */
        this.screenReaderPreviousText = 'Previous';
        /**
         * Screen reader text for next button
         */
        this.screenReaderNextText = 'Next';
        /**
         * Screen reader text for lasr button
         */
        this.screenReaderLastText = 'Last';
        /**
         * Screen reader text for page numbers
         */
        this.screenReaderPageText = 'Page';
        /**
         * Screen reader text for current page
         */
        this.screenReaderCurrentPageText = 'You`re on page';
        /**
         * Screen reader text for the pagination component
         */
        this.screenReaderPaginationLabel = 'Pagination';
        /**
         * Hides the pagination component if the items are less than `itemsPerPage`
         */
        this.autoHide = false;
        /**
         * disables pagination component
         */
        this.disabled = false;
        /**
         * Emits an event whenever the current page is changed, It emits the current page number
         *
         * This event is originally picked up from `AngularPaginatorDirective`
         */
        this.pageChange = new EventEmitter();
    }
    ngOnInit() {
        // set default id if not provided
        this.id = this.id ? this.id : this.angularPaginatorService.id;
        // set default class if not provided
        this.className = this.className ? this.className : this.angularPaginatorService.id;
    }
}
AngularPaginatorComponent.decorators = [
    { type: Component, args: [{
                selector: 'angular-paginator',
                template: "<angularPaginator [id]=\"id\" [boundaryLinks]=\"boundaryLinks\" [directionLinks]=\"directionLinks\" [maxSize]=\"maxSize\"\n  [rotate]=\"rotate\" [boundaryLinkNumbers]=\"boundaryLinkNumbers\" [forceEllipses]=\"forceEllipses\" #paginator=\"angularPaginator\"\n  (pageChange)=\"pageChange.emit($event)\">\n\n  <!-- ======================================== BOOTSTRAP 4 TEMPLATE ======================================== -->\n  <ng-container *ngIf=\"!(autoHide && paginator.pages['length'] <= 1)\">\n    <nav class=\"angular-bs4-pagination\" [attr.aria-label]=\"screenReaderPaginationLabel\">\n\n      <ng-container *ngIf=\"paginator.pages['length'] !== 0\">\n        <ul class=\"pagination\" [ngClass]=\"className\">\n\n          <!-- boundary link -->\n          <li class=\"page-item\" *ngIf=\"boundaryLinks\" (click)=\"paginator.toFirstPage()\" [ngClass]=\"{'disabled': (paginator.currentPage === paginator.firstPage) || disabled}\">\n            <a class=\"page-link\" href=\"javascript:void(0)\">\n              <span aria-hidden=\"true\" [innerHTML]=\"firstText\"></span>\n              <span class=\"sr-only\">{{ screenReaderFirstText }}</span>\n            </a>\n          </li>\n\n          <!-- direction link -->\n          <li class=\"page-item\" *ngIf=\"directionLinks\" (click)=\"paginator.toPreviousPage()\" [ngClass]=\"{'disabled': (paginator.currentPage === paginator.firstPage) || disabled}\">\n            <a class=\"page-link\" href=\"javascript:void(0)\">\n              <span aria-hidden=\"true\" [innerHTML]=\"previousText\"></span>\n              <span class=\"sr-only\">{{ screenReaderPreviousText }}</span>\n            </a>\n          </li>\n\n          <!-- pagination array -->\n          <li class=\"page-item\" *ngFor=\"let page of paginator.pages\" [ngClass]=\"{'active': page['active'], 'disabled': disabled}\"\n            (click)=\"!page['active'] && paginator.setCurrentPage(page['number'])\">\n            <a href=\"javascript:void(0)\" class=\"page-link\">\n              {{ page['text'] }}\n              <span class=\"sr-only\" *ngIf=\"!page['active']\">{{ screenReaderPageText + ' ' }}{{ page['text'] }}</span>\n              <span class=\"sr-only\" *ngIf=\"page['active']\">{{ screenReaderCurrentPageText + ' ' }}{{ page['text'] }}</span>\n            </a>\n          </li>\n\n          <!-- direction link -->\n          <li class=\"page-item\" *ngIf=\"directionLinks\" (click)=\"paginator.toNextPage()\" [ngClass]=\"{'disabled': (paginator.currentPage === paginator.lastPage) || disabled}\">\n            <a class=\"page-link\" href=\"javascript:void(0)\">\n              <span aria-hidden=\"true\" [innerHTML]=\"nextText\"></span>\n              <span class=\"sr-only\">{{ screenReaderNextText }}</span>\n            </a>\n          </li>\n\n          <!-- boundary link -->\n          <li class=\"page-item\" *ngIf=\"boundaryLinks\" (click)=\"paginator.toLastPage()\" [ngClass]=\"{'disabled': (paginator.currentPage === paginator.lastPage) || disabled}\">\n            <a class=\"page-link\" href=\"javascript:void(0)\">\n              <span aria-hidden=\"true\" [innerHTML]=\"lastText\"></span>\n              <span class=\"sr-only\">{{ screenReaderLastText }}</span>\n            </a>\n          </li>\n\n        </ul>\n      </ng-container>\n\n    </nav>\n  </ng-container>\n\n</angularPaginator>\n",
                changeDetection: ChangeDetectionStrategy.OnPush,
                styles: [".angular-bs4-pagination .disabled{pointer-events:none}"]
            },] }
];
AngularPaginatorComponent.ctorParameters = () => [
    { type: AngularPaginatorService }
];
AngularPaginatorComponent.propDecorators = {
    boundaryLinks: [{ type: Input }],
    directionLinks: [{ type: Input }],
    maxSize: [{ type: Input }],
    rotate: [{ type: Input }],
    boundaryLinkNumbers: [{ type: Input }],
    forceEllipses: [{ type: Input }],
    id: [{ type: Input }],
    firstText: [{ type: Input }],
    previousText: [{ type: Input }],
    nextText: [{ type: Input }],
    lastText: [{ type: Input }],
    screenReaderFirstText: [{ type: Input }],
    screenReaderPreviousText: [{ type: Input }],
    screenReaderNextText: [{ type: Input }],
    screenReaderLastText: [{ type: Input }],
    screenReaderPageText: [{ type: Input }],
    screenReaderCurrentPageText: [{ type: Input }],
    screenReaderPaginationLabel: [{ type: Input }],
    className: [{ type: Input }],
    autoHide: [{ type: Input }],
    disabled: [{ type: Input }],
    pageChange: [{ type: Output }]
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYW5ndWxhci1wYWdpbmF0b3IuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vc3JjL2xpYi9hbmd1bGFyLXBhZ2luYXRvci5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFNBQVMsRUFBVSx1QkFBdUIsRUFBRSxLQUFLLEVBQUUsTUFBTSxFQUFFLFlBQVksRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUN4RyxPQUFPLEVBQUUsdUJBQXVCLEVBQUUsTUFBTSxzQ0FBc0MsQ0FBQztBQUUvRTs7R0FFRztBQVFILE1BQU0sT0FBTyx5QkFBeUI7SUFtR3BDOzs7T0FHRztJQUNILFlBQW9CLHVCQUFnRDtRQUFoRCw0QkFBdUIsR0FBdkIsdUJBQXVCLENBQXlCO1FBckdwRTs7V0FFRztRQUNNLGtCQUFhLEdBQUcsS0FBSyxDQUFDO1FBQy9COztXQUVHO1FBQ00sbUJBQWMsR0FBRyxJQUFJLENBQUM7UUFDL0I7O1dBRUc7UUFDTSxZQUFPLEdBQUcsQ0FBQyxDQUFDO1FBQ3JCOztXQUVHO1FBQ00sV0FBTSxHQUFHLElBQUksQ0FBQztRQUN2Qjs7Ozs7O1dBTUc7UUFDTSx3QkFBbUIsR0FBRyxLQUFLLENBQUM7UUFDckM7O1dBRUc7UUFDTSxrQkFBYSxHQUFHLEtBQUssQ0FBQztRQU0vQjs7V0FFRztRQUNNLGNBQVMsR0FBRyxPQUFPLENBQUM7UUFDN0I7O1dBRUc7UUFDTSxpQkFBWSxHQUFHLFVBQVUsQ0FBQztRQUNuQzs7V0FFRztRQUNNLGFBQVEsR0FBRyxNQUFNLENBQUM7UUFDM0I7O1dBRUc7UUFDTSxhQUFRLEdBQUcsTUFBTSxDQUFDO1FBQzNCOztXQUVHO1FBQ00sMEJBQXFCLEdBQUcsT0FBTyxDQUFDO1FBQ3pDOztXQUVHO1FBQ00sNkJBQXdCLEdBQUcsVUFBVSxDQUFDO1FBQy9DOztXQUVHO1FBQ00seUJBQW9CLEdBQUcsTUFBTSxDQUFDO1FBQ3ZDOztXQUVHO1FBQ00seUJBQW9CLEdBQUcsTUFBTSxDQUFDO1FBQ3ZDOztXQUVHO1FBQ00seUJBQW9CLEdBQUcsTUFBTSxDQUFDO1FBQ3ZDOztXQUVHO1FBQ00sZ0NBQTJCLEdBQUcsZ0JBQWdCLENBQUM7UUFDeEQ7O1dBRUc7UUFDTSxnQ0FBMkIsR0FBRyxZQUFZLENBQUM7UUFLcEQ7O1dBRUc7UUFDTSxhQUFRLEdBQUcsS0FBSyxDQUFDO1FBQzFCOztXQUVHO1FBQ00sYUFBUSxHQUFHLEtBQUssQ0FBQztRQUUxQjs7OztXQUlHO1FBQ08sZUFBVSxHQUF5QixJQUFJLFlBQVksRUFBVSxDQUFDO0lBTUEsQ0FBQztJQUV6RSxRQUFRO1FBRU4saUNBQWlDO1FBQ2pDLElBQUksQ0FBQyxFQUFFLEdBQUcsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLHVCQUF1QixDQUFDLEVBQUUsQ0FBQztRQUU5RCxvQ0FBb0M7UUFDcEMsSUFBSSxDQUFDLFNBQVMsR0FBRyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsdUJBQXVCLENBQUMsRUFBRSxDQUFDO0lBQ3JGLENBQUM7OztZQXZIRixTQUFTLFNBQUM7Z0JBQ1QsUUFBUSxFQUFFLG1CQUFtQjtnQkFDN0IsMHhHQUFpRDtnQkFFakQsZUFBZSxFQUFFLHVCQUF1QixDQUFDLE1BQU07O2FBQ2hEOzs7WUFWUSx1QkFBdUI7Ozs0QkFpQjdCLEtBQUs7NkJBSUwsS0FBSztzQkFJTCxLQUFLO3FCQUlMLEtBQUs7a0NBUUwsS0FBSzs0QkFJTCxLQUFLO2lCQUtMLEtBQUs7d0JBSUwsS0FBSzsyQkFJTCxLQUFLO3VCQUlMLEtBQUs7dUJBSUwsS0FBSztvQ0FJTCxLQUFLO3VDQUlMLEtBQUs7bUNBSUwsS0FBSzttQ0FJTCxLQUFLO21DQUlMLEtBQUs7MENBSUwsS0FBSzswQ0FJTCxLQUFLO3dCQUlMLEtBQUs7dUJBSUwsS0FBSzt1QkFJTCxLQUFLO3lCQU9MLE1BQU0iLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb21wb25lbnQsIE9uSW5pdCwgQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3ksIElucHV0LCBPdXRwdXQsIEV2ZW50RW1pdHRlciB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgQW5ndWxhclBhZ2luYXRvclNlcnZpY2UgfSBmcm9tICcuL3NlcnZpY2VzL2FuZ3VsYXItcGFnaW5hdG9yLnNlcnZpY2UnO1xuXG4vKipcbiAqIFRoZSBjb21wb25lbnQgdGhhdCByZW5kZXJzIHRoZSBQYWdpbmF0aW9uIGNvbXBvbmVudCB0ZW1wbGF0ZSwgSXQgYWxzbyBhY2NlcHRzIHRoZSBpbnB1dHMgZm9yIHRoZSBQYWdpbmF0aW9uIGNvbXBvbmVudFxuICovXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICdhbmd1bGFyLXBhZ2luYXRvcicsXG4gIHRlbXBsYXRlVXJsOiAnLi9hbmd1bGFyLXBhZ2luYXRvci5jb21wb25lbnQuaHRtbCcsXG4gIHN0eWxlVXJsczogWycuL2FuZ3VsYXItcGFnaW5hdG9yLmNvbXBvbmVudC5zY3NzJ10sXG4gIGNoYW5nZURldGVjdGlvbjogQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3kuT25QdXNoXG59KVxuXG5leHBvcnQgY2xhc3MgQW5ndWxhclBhZ2luYXRvckNvbXBvbmVudCBpbXBsZW1lbnRzIE9uSW5pdCB7XG5cbiAgLyoqXG4gICAqIFdoZXRoZXIgdG8gZGlzcGxheSBGaXJzdCAvIExhc3QgYnV0dG9uc1xuICAgKi9cbiAgQElucHV0KCkgYm91bmRhcnlMaW5rcyA9IGZhbHNlO1xuICAvKipcbiAgICogV2hldGhlciB0byBkaXNwbGF5IFByZXZpb3VzIC8gTmV4dCBidXR0b25zXG4gICAqL1xuICBASW5wdXQoKSBkaXJlY3Rpb25MaW5rcyA9IHRydWU7XG4gIC8qKlxuICAgKiBMaW1pdCBudW1iZXIgZm9yIHBhZ2luYXRpb24gc2l6ZSwgaS5lLiwgdGhlIG1heGltdW0gcGFnZSBudW1iZXJzIHRvIGJlIGRpc3BsYXllZFxuICAgKi9cbiAgQElucHV0KCkgbWF4U2l6ZSA9IDU7XG4gIC8qKlxuICAgKiBXaGV0aGVyIHRvIGtlZXAgY3VycmVudCBwYWdlIGluIHRoZSBtaWRkbGUgb2YgdGhlIHZpc2libGUgb25lc1xuICAgKi9cbiAgQElucHV0KCkgcm90YXRlID0gdHJ1ZTtcbiAgLyoqXG4gICAqIFdoZXRoZXIgdG8gYWx3YXlzIGRpc3BsYXkgdGhlIGZpcnN0IGFuZCBsYXN0IHBhZ2UgbnVtYmVycy5cbiAgICogSWYgbWF4LXNpemUgaXMgc21hbGxlciB0aGFuIHRoZSBudW1iZXIgb2YgcGFnZXMsIHRoZW4gdGhlIGZpcnN0IGFuZCBsYXN0IHBhZ2UgbnVtYmVycyBhcmUgc3RpbGwgc2hvd24gd2l0aCBlbGxpcHNlc1xuICAgKiBpbi1iZXR3ZWVuIGFzIG5lY2Vzc2FyeS4gTk9URTogbWF4LXNpemUgcmVmZXJzIHRvIHRoZSBjZW50ZXIgb2YgdGhlIHJhbmdlLlxuICAgKiBUaGlzIG9wdGlvbiBtYXkgYWRkIHVwIHRvIDIgbW9yZSBudW1iZXJzIG9uIGVhY2ggc2lkZSBvZiB0aGUgZGlzcGxheWVkIHJhbmdlIGZvciB0aGUgZW5kIHZhbHVlIGFuZFxuICAgKiB3aGF0IHdvdWxkIGJlIGFuIGVsbGlwc2lzIGJ1dCBpcyByZXBsYWNlZCBieSBhIG51bWJlciBiZWNhdXNlIGl0IGlzIHNlcXVlbnRpYWxcbiAgICovXG4gIEBJbnB1dCgpIGJvdW5kYXJ5TGlua051bWJlcnMgPSBmYWxzZTtcbiAgLyoqXG4gICAqIEFsc28gZGlzcGxheXMgZWxsaXBzZXMgd2hlbiByb3RhdGUgaXMgdHJ1ZSBhbmQgbWF4U2l6ZSBpcyBzbWFsbGVyIHRoYW4gdGhlIG51bWJlciBvZiBwYWdlcyBmb3JjZUVsbGlwc2VzXG4gICAqL1xuICBASW5wdXQoKSBmb3JjZUVsbGlwc2VzID0gZmFsc2U7XG4gIC8qKlxuICAgKiBVc2UgdW5pcXVlIGlkIHdoZW4gbXVsdGlwbGUgcGFnaW5hdGlvbnMgYXJlIGJlaW5nIHVzZWQgb24gdGhlIHNhbWUgcGFnZS5cbiAgICogQnkgRGVmYXVsdCBQYWdpbmF0b3IgdXNlcyBpZCBgQU5HVUxBUl9QQUdJTkFUT1JfREVGQVVMVGBcbiAgICovXG4gIEBJbnB1dCgpIGlkOiBzdHJpbmc7XG4gIC8qKlxuICAgKiBUZXh0IGZvciBmaXJzdCBidXR0b25cbiAgICovXG4gIEBJbnB1dCgpIGZpcnN0VGV4dCA9ICdGaXJzdCc7XG4gIC8qKlxuICAgKiBUZXh0IGZvciBwcmV2aW91cyBidXR0b25cbiAgICovXG4gIEBJbnB1dCgpIHByZXZpb3VzVGV4dCA9ICdQcmV2aW91cyc7XG4gIC8qKlxuICAgKiBUZXh0IGZvciBuZXh0IGJ1dHRvblxuICAgKi9cbiAgQElucHV0KCkgbmV4dFRleHQgPSAnTmV4dCc7XG4gIC8qKlxuICAgKiBUZXh0IGZvciBsYXN0IGJ1dHRvblxuICAgKi9cbiAgQElucHV0KCkgbGFzdFRleHQgPSAnTGFzdCc7XG4gIC8qKlxuICAgKiBTY3JlZW4gcmVhZGVyIHRleHQgZm9yIGZpcnN0IGJ1dHRvblxuICAgKi9cbiAgQElucHV0KCkgc2NyZWVuUmVhZGVyRmlyc3RUZXh0ID0gJ0ZpcnN0JztcbiAgLyoqXG4gICAqIFNjcmVlbiByZWFkZXIgdGV4dCBmb3IgcHJldmlvdXMgYnV0dG9uXG4gICAqL1xuICBASW5wdXQoKSBzY3JlZW5SZWFkZXJQcmV2aW91c1RleHQgPSAnUHJldmlvdXMnO1xuICAvKipcbiAgICogU2NyZWVuIHJlYWRlciB0ZXh0IGZvciBuZXh0IGJ1dHRvblxuICAgKi9cbiAgQElucHV0KCkgc2NyZWVuUmVhZGVyTmV4dFRleHQgPSAnTmV4dCc7XG4gIC8qKlxuICAgKiBTY3JlZW4gcmVhZGVyIHRleHQgZm9yIGxhc3IgYnV0dG9uXG4gICAqL1xuICBASW5wdXQoKSBzY3JlZW5SZWFkZXJMYXN0VGV4dCA9ICdMYXN0JztcbiAgLyoqXG4gICAqIFNjcmVlbiByZWFkZXIgdGV4dCBmb3IgcGFnZSBudW1iZXJzXG4gICAqL1xuICBASW5wdXQoKSBzY3JlZW5SZWFkZXJQYWdlVGV4dCA9ICdQYWdlJztcbiAgLyoqXG4gICAqIFNjcmVlbiByZWFkZXIgdGV4dCBmb3IgY3VycmVudCBwYWdlXG4gICAqL1xuICBASW5wdXQoKSBzY3JlZW5SZWFkZXJDdXJyZW50UGFnZVRleHQgPSAnWW91YHJlIG9uIHBhZ2UnO1xuICAvKipcbiAgICogU2NyZWVuIHJlYWRlciB0ZXh0IGZvciB0aGUgcGFnaW5hdGlvbiBjb21wb25lbnRcbiAgICovXG4gIEBJbnB1dCgpIHNjcmVlblJlYWRlclBhZ2luYXRpb25MYWJlbCA9ICdQYWdpbmF0aW9uJztcbiAgLyoqXG4gICAqIEFkZHMgY3VzdG9tIGNsYXNzIHRvIHRoZSBwYWdpbmF0aW9uIGVsZW1lbnRcbiAgICovXG4gIEBJbnB1dCgpIGNsYXNzTmFtZTogc3RyaW5nO1xuICAvKipcbiAgICogSGlkZXMgdGhlIHBhZ2luYXRpb24gY29tcG9uZW50IGlmIHRoZSBpdGVtcyBhcmUgbGVzcyB0aGFuIGBpdGVtc1BlclBhZ2VgXG4gICAqL1xuICBASW5wdXQoKSBhdXRvSGlkZSA9IGZhbHNlO1xuICAvKipcbiAgICogZGlzYWJsZXMgcGFnaW5hdGlvbiBjb21wb25lbnRcbiAgICovXG4gIEBJbnB1dCgpIGRpc2FibGVkID0gZmFsc2U7XG5cbiAgLyoqXG4gICAqIEVtaXRzIGFuIGV2ZW50IHdoZW5ldmVyIHRoZSBjdXJyZW50IHBhZ2UgaXMgY2hhbmdlZCwgSXQgZW1pdHMgdGhlIGN1cnJlbnQgcGFnZSBudW1iZXJcbiAgICpcbiAgICogVGhpcyBldmVudCBpcyBvcmlnaW5hbGx5IHBpY2tlZCB1cCBmcm9tIGBBbmd1bGFyUGFnaW5hdG9yRGlyZWN0aXZlYFxuICAgKi9cbiAgQE91dHB1dCgpIHBhZ2VDaGFuZ2U6IEV2ZW50RW1pdHRlcjxudW1iZXI+ID0gbmV3IEV2ZW50RW1pdHRlcjxudW1iZXI+KCk7XG5cbiAgLyoqXG4gICAqXG4gICAqIEBwYXJhbSBhbmd1bGFyUGFnaW5hdG9yU2VydmljZSBzZXJ2aWNlIGZvciBhbmd1bGFyIHBhZ2luYXRvclxuICAgKi9cbiAgY29uc3RydWN0b3IocHJpdmF0ZSBhbmd1bGFyUGFnaW5hdG9yU2VydmljZTogQW5ndWxhclBhZ2luYXRvclNlcnZpY2UpIHsgfVxuXG4gIG5nT25Jbml0KCk6IHZvaWQge1xuXG4gICAgLy8gc2V0IGRlZmF1bHQgaWQgaWYgbm90IHByb3ZpZGVkXG4gICAgdGhpcy5pZCA9IHRoaXMuaWQgPyB0aGlzLmlkIDogdGhpcy5hbmd1bGFyUGFnaW5hdG9yU2VydmljZS5pZDtcblxuICAgIC8vIHNldCBkZWZhdWx0IGNsYXNzIGlmIG5vdCBwcm92aWRlZFxuICAgIHRoaXMuY2xhc3NOYW1lID0gdGhpcy5jbGFzc05hbWUgPyB0aGlzLmNsYXNzTmFtZSA6IHRoaXMuYW5ndWxhclBhZ2luYXRvclNlcnZpY2UuaWQ7XG4gIH1cbn1cbiJdfQ==