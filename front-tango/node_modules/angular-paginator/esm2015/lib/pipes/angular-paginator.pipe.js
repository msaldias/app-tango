import { Pipe } from '@angular/core';
import { AngularPaginatorService } from '../services/angular-paginator.service';
/**
 * Pagination Pipe which paginates the array for the provided arguments such as `itemsPerPage` and `currentPage`
 */
export class AngularPaginatorPipe {
    /**
     *
     * @param angularPaginatorService service for angular pagiantor
     */
    constructor(angularPaginatorService) {
        this.angularPaginatorService = angularPaginatorService;
    }
    /**
     * this pipes paginates the array for the provided arguments such as `itemsPerPage` and `currentPage`
     *
     * @param array input array for which the manipulation happens
     * @param args input arguments for the paginator pipe
     */
    transform(array, args) {
        const instance = this.createInstance(array, args);
        // create pagination information
        this.angularPaginatorService.registerInstance(instance);
        // set the slicing range
        const start = (instance.currentPage - 1) * instance.itemsPerPage;
        const end = instance.currentPage * instance.itemsPerPage;
        return array.slice(start, end);
    }
    /**
     * create an instance for each pipe
     *
     * @param array input array for which the manipulation happens
     * @param args input arguments for the paginator pipe
     */
    createInstance(array, args) {
        return {
            id: args.id ? args.id : this.angularPaginatorService.id,
            currentPage: args.currentPage ? args.currentPage : 1,
            itemsPerPage: args.itemsPerPage ? args.itemsPerPage : 10,
            totalItems: array.length
        };
    }
}
AngularPaginatorPipe.decorators = [
    { type: Pipe, args: [{
                name: 'angularPaginator'
            },] }
];
AngularPaginatorPipe.ctorParameters = () => [
    { type: AngularPaginatorService }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYW5ndWxhci1wYWdpbmF0b3IucGlwZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3NyYy9saWIvcGlwZXMvYW5ndWxhci1wYWdpbmF0b3IucGlwZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsSUFBSSxFQUFpQixNQUFNLGVBQWUsQ0FBQztBQUNwRCxPQUFPLEVBQUUsdUJBQXVCLEVBQUUsTUFBTSx1Q0FBdUMsQ0FBQztBQUdoRjs7R0FFRztBQUtILE1BQU0sT0FBTyxvQkFBb0I7SUFDL0I7OztPQUdHO0lBQ0gsWUFBb0IsdUJBQWdEO1FBQWhELDRCQUF1QixHQUF2Qix1QkFBdUIsQ0FBeUI7SUFBSSxDQUFDO0lBRXpFOzs7OztPQUtHO0lBQ0gsU0FBUyxDQUFDLEtBQVUsRUFBRSxJQUFVO1FBRTlCLE1BQU0sUUFBUSxHQUE2QixJQUFJLENBQUMsY0FBYyxDQUFDLEtBQUssRUFBRSxJQUFJLENBQUMsQ0FBQztRQUU1RSxnQ0FBZ0M7UUFDaEMsSUFBSSxDQUFDLHVCQUF1QixDQUFDLGdCQUFnQixDQUFDLFFBQVEsQ0FBQyxDQUFDO1FBRXhELHdCQUF3QjtRQUN4QixNQUFNLEtBQUssR0FBRyxDQUFDLFFBQVEsQ0FBQyxXQUFXLEdBQUcsQ0FBQyxDQUFDLEdBQUcsUUFBUSxDQUFDLFlBQVksQ0FBQztRQUNqRSxNQUFNLEdBQUcsR0FBRyxRQUFRLENBQUMsV0FBVyxHQUFHLFFBQVEsQ0FBQyxZQUFZLENBQUM7UUFFekQsT0FBTyxLQUFLLENBQUMsS0FBSyxDQUFDLEtBQUssRUFBRSxHQUFHLENBQUMsQ0FBQztJQUVqQyxDQUFDO0lBRUQ7Ozs7O09BS0c7SUFDSCxjQUFjLENBQUMsS0FBVSxFQUFFLElBQVM7UUFDbEMsT0FBTztZQUNMLEVBQUUsRUFBRSxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsdUJBQXVCLENBQUMsRUFBRTtZQUN2RCxXQUFXLEVBQUUsSUFBSSxDQUFDLFdBQVcsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUNwRCxZQUFZLEVBQUUsSUFBSSxDQUFDLFlBQVksQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxDQUFDLENBQUMsRUFBRTtZQUN4RCxVQUFVLEVBQUUsS0FBSyxDQUFDLE1BQU07U0FDekIsQ0FBQztJQUNKLENBQUM7OztZQTdDRixJQUFJLFNBQUM7Z0JBQ0osSUFBSSxFQUFFLGtCQUFrQjthQUN6Qjs7O1lBUlEsdUJBQXVCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgUGlwZSwgUGlwZVRyYW5zZm9ybSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgQW5ndWxhclBhZ2luYXRvclNlcnZpY2UgfSBmcm9tICcuLi9zZXJ2aWNlcy9hbmd1bGFyLXBhZ2luYXRvci5zZXJ2aWNlJztcbmltcG9ydCB7IEFuZ3VsYXJQYWdpbmF0b3JJbnN0YW5jZSB9IGZyb20gJy4uL290aGVycy9hbmd1bGFyLXBhZ2luYXRvci5pbnRlcmZhY2UnO1xuXG4vKipcbiAqIFBhZ2luYXRpb24gUGlwZSB3aGljaCBwYWdpbmF0ZXMgdGhlIGFycmF5IGZvciB0aGUgcHJvdmlkZWQgYXJndW1lbnRzIHN1Y2ggYXMgYGl0ZW1zUGVyUGFnZWAgYW5kIGBjdXJyZW50UGFnZWBcbiAqL1xuQFBpcGUoe1xuICBuYW1lOiAnYW5ndWxhclBhZ2luYXRvcidcbn0pXG5cbmV4cG9ydCBjbGFzcyBBbmd1bGFyUGFnaW5hdG9yUGlwZSBpbXBsZW1lbnRzIFBpcGVUcmFuc2Zvcm0ge1xuICAvKipcbiAgICpcbiAgICogQHBhcmFtIGFuZ3VsYXJQYWdpbmF0b3JTZXJ2aWNlIHNlcnZpY2UgZm9yIGFuZ3VsYXIgcGFnaWFudG9yXG4gICAqL1xuICBjb25zdHJ1Y3Rvcihwcml2YXRlIGFuZ3VsYXJQYWdpbmF0b3JTZXJ2aWNlOiBBbmd1bGFyUGFnaW5hdG9yU2VydmljZSkgeyB9XG5cbiAgLyoqXG4gICAqIHRoaXMgcGlwZXMgcGFnaW5hdGVzIHRoZSBhcnJheSBmb3IgdGhlIHByb3ZpZGVkIGFyZ3VtZW50cyBzdWNoIGFzIGBpdGVtc1BlclBhZ2VgIGFuZCBgY3VycmVudFBhZ2VgXG4gICAqXG4gICAqIEBwYXJhbSBhcnJheSBpbnB1dCBhcnJheSBmb3Igd2hpY2ggdGhlIG1hbmlwdWxhdGlvbiBoYXBwZW5zXG4gICAqIEBwYXJhbSBhcmdzIGlucHV0IGFyZ3VtZW50cyBmb3IgdGhlIHBhZ2luYXRvciBwaXBlXG4gICAqL1xuICB0cmFuc2Zvcm0oYXJyYXk6IGFueSwgYXJncz86IGFueSk6IGFueSB7XG5cbiAgICBjb25zdCBpbnN0YW5jZTogQW5ndWxhclBhZ2luYXRvckluc3RhbmNlID0gdGhpcy5jcmVhdGVJbnN0YW5jZShhcnJheSwgYXJncyk7XG5cbiAgICAvLyBjcmVhdGUgcGFnaW5hdGlvbiBpbmZvcm1hdGlvblxuICAgIHRoaXMuYW5ndWxhclBhZ2luYXRvclNlcnZpY2UucmVnaXN0ZXJJbnN0YW5jZShpbnN0YW5jZSk7XG5cbiAgICAvLyBzZXQgdGhlIHNsaWNpbmcgcmFuZ2VcbiAgICBjb25zdCBzdGFydCA9IChpbnN0YW5jZS5jdXJyZW50UGFnZSAtIDEpICogaW5zdGFuY2UuaXRlbXNQZXJQYWdlO1xuICAgIGNvbnN0IGVuZCA9IGluc3RhbmNlLmN1cnJlbnRQYWdlICogaW5zdGFuY2UuaXRlbXNQZXJQYWdlO1xuXG4gICAgcmV0dXJuIGFycmF5LnNsaWNlKHN0YXJ0LCBlbmQpO1xuXG4gIH1cblxuICAvKipcbiAgICogY3JlYXRlIGFuIGluc3RhbmNlIGZvciBlYWNoIHBpcGVcbiAgICpcbiAgICogQHBhcmFtIGFycmF5IGlucHV0IGFycmF5IGZvciB3aGljaCB0aGUgbWFuaXB1bGF0aW9uIGhhcHBlbnNcbiAgICogQHBhcmFtIGFyZ3MgaW5wdXQgYXJndW1lbnRzIGZvciB0aGUgcGFnaW5hdG9yIHBpcGVcbiAgICovXG4gIGNyZWF0ZUluc3RhbmNlKGFycmF5OiBhbnksIGFyZ3M6IGFueSk6IGFueSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGlkOiBhcmdzLmlkID8gYXJncy5pZCA6IHRoaXMuYW5ndWxhclBhZ2luYXRvclNlcnZpY2UuaWQsXG4gICAgICBjdXJyZW50UGFnZTogYXJncy5jdXJyZW50UGFnZSA/IGFyZ3MuY3VycmVudFBhZ2UgOiAxLFxuICAgICAgaXRlbXNQZXJQYWdlOiBhcmdzLml0ZW1zUGVyUGFnZSA/IGFyZ3MuaXRlbXNQZXJQYWdlIDogMTAsXG4gICAgICB0b3RhbEl0ZW1zOiBhcnJheS5sZW5ndGhcbiAgICB9O1xuICB9XG59XG4iXX0=