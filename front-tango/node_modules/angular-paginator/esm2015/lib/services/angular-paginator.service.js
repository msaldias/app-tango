import { Injectable, EventEmitter } from '@angular/core';
export class AngularPaginatorService {
    constructor() {
        /** id is used to identify pagination instances */
        this.id = 'ANGULAR_PAGINATOR_DEFAULT';
        /** instances is the collection of pagination componetns */
        this.instances = {};
        /** emits an event with instance id whenever the page number changes */
        this.change = new EventEmitter();
    }
    /**
     * creates an instance for every pipe differentiated with id
     *
     * @param instance each instance refers to a unique pagination component
     */
    registerInstance(instance) {
        if (!this.instances[instance.id]) {
            this.instances[instance.id] = instance;
            this.change.emit(instance.id);
        }
        else {
            const changed = this.updateInstance(instance);
            if (changed) {
                this.change.emit(instance.id);
            }
        }
        return;
    }
    /**
     * updates existing pagination instances available
     * and returns true if value has changed
     *
     * @param instance an unique pagination component
     */
    updateInstance(instance) {
        for (const key in instance) {
            if (instance[key] !== this.instances[instance.id][key]) {
                this.instances[instance.id][key] = instance[key];
                return true;
            }
        }
        return false;
    }
    /**
     * return instance with given id
     *
     * @param id unique id of the pagination component
     */
    getInstance(id) {
        return this.instances[id];
    }
    /**
     * return currentPage for given id
     *
     * @param id unique id of the pagination component
     */
    getCurrentPage(id) {
        return this.instances[id].currentPage;
    }
}
AngularPaginatorService.decorators = [
    { type: Injectable }
];
AngularPaginatorService.ctorParameters = () => [];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYW5ndWxhci1wYWdpbmF0b3Iuc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3NyYy9saWIvc2VydmljZXMvYW5ndWxhci1wYWdpbmF0b3Iuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLFlBQVksRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUl6RCxNQUFNLE9BQU8sdUJBQXVCO0lBVWxDO1FBVEEsa0RBQWtEO1FBQ2xELE9BQUUsR0FBRywyQkFBMkIsQ0FBQztRQUVqQywyREFBMkQ7UUFDM0QsY0FBUyxHQUFRLEVBQUUsQ0FBQztRQUVwQix1RUFBdUU7UUFDdkUsV0FBTSxHQUF5QixJQUFJLFlBQVksRUFBVSxDQUFDO0lBRTFDLENBQUM7SUFFakI7Ozs7T0FJRztJQUNILGdCQUFnQixDQUFDLFFBQWtDO1FBRWpELElBQUksQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLFFBQVEsQ0FBQyxFQUFFLENBQUMsRUFBRTtZQUNoQyxJQUFJLENBQUMsU0FBUyxDQUFDLFFBQVEsQ0FBQyxFQUFFLENBQUMsR0FBRyxRQUFRLENBQUM7WUFDdkMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLEVBQUUsQ0FBQyxDQUFDO1NBQy9CO2FBQU07WUFDTCxNQUFNLE9BQU8sR0FBRyxJQUFJLENBQUMsY0FBYyxDQUFDLFFBQVEsQ0FBQyxDQUFDO1lBQzlDLElBQUksT0FBTyxFQUFFO2dCQUNYLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxFQUFFLENBQUMsQ0FBQzthQUMvQjtTQUNGO1FBRUQsT0FBTztJQUNULENBQUM7SUFFRDs7Ozs7T0FLRztJQUNILGNBQWMsQ0FBQyxRQUFrQztRQUUvQyxLQUFLLE1BQU0sR0FBRyxJQUFJLFFBQVEsRUFBRTtZQUMxQixJQUFJLFFBQVEsQ0FBQyxHQUFHLENBQUMsS0FBSyxJQUFJLENBQUMsU0FBUyxDQUFDLFFBQVEsQ0FBQyxFQUFFLENBQUMsQ0FBQyxHQUFHLENBQUMsRUFBRTtnQkFDdEQsSUFBSSxDQUFDLFNBQVMsQ0FBQyxRQUFRLENBQUMsRUFBRSxDQUFDLENBQUMsR0FBRyxDQUFDLEdBQUcsUUFBUSxDQUFDLEdBQUcsQ0FBQyxDQUFDO2dCQUNqRCxPQUFPLElBQUksQ0FBQzthQUNiO1NBQ0Y7UUFFRCxPQUFPLEtBQUssQ0FBQztJQUNmLENBQUM7SUFFRDs7OztPQUlHO0lBQ0gsV0FBVyxDQUFDLEVBQVU7UUFDcEIsT0FBTyxJQUFJLENBQUMsU0FBUyxDQUFDLEVBQUUsQ0FBQyxDQUFDO0lBQzVCLENBQUM7SUFFRDs7OztPQUlHO0lBQ0gsY0FBYyxDQUFDLEVBQVU7UUFDdkIsT0FBTyxJQUFJLENBQUMsU0FBUyxDQUFDLEVBQUUsQ0FBQyxDQUFDLFdBQVcsQ0FBQztJQUN4QyxDQUFDOzs7WUFuRUYsVUFBVSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUsIEV2ZW50RW1pdHRlciB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgQW5ndWxhclBhZ2luYXRvckluc3RhbmNlIH0gZnJvbSAnLi4vb3RoZXJzL2FuZ3VsYXItcGFnaW5hdG9yLmludGVyZmFjZSc7XG5cbkBJbmplY3RhYmxlKClcbmV4cG9ydCBjbGFzcyBBbmd1bGFyUGFnaW5hdG9yU2VydmljZSB7XG4gIC8qKiBpZCBpcyB1c2VkIHRvIGlkZW50aWZ5IHBhZ2luYXRpb24gaW5zdGFuY2VzICovXG4gIGlkID0gJ0FOR1VMQVJfUEFHSU5BVE9SX0RFRkFVTFQnO1xuXG4gIC8qKiBpbnN0YW5jZXMgaXMgdGhlIGNvbGxlY3Rpb24gb2YgcGFnaW5hdGlvbiBjb21wb25ldG5zICovXG4gIGluc3RhbmNlczogYW55ID0ge307XG5cbiAgLyoqIGVtaXRzIGFuIGV2ZW50IHdpdGggaW5zdGFuY2UgaWQgd2hlbmV2ZXIgdGhlIHBhZ2UgbnVtYmVyIGNoYW5nZXMgKi9cbiAgY2hhbmdlOiBFdmVudEVtaXR0ZXI8c3RyaW5nPiA9IG5ldyBFdmVudEVtaXR0ZXI8c3RyaW5nPigpO1xuXG4gIGNvbnN0cnVjdG9yKCkgeyB9XG5cbiAgLyoqXG4gICAqIGNyZWF0ZXMgYW4gaW5zdGFuY2UgZm9yIGV2ZXJ5IHBpcGUgZGlmZmVyZW50aWF0ZWQgd2l0aCBpZFxuICAgKlxuICAgKiBAcGFyYW0gaW5zdGFuY2UgZWFjaCBpbnN0YW5jZSByZWZlcnMgdG8gYSB1bmlxdWUgcGFnaW5hdGlvbiBjb21wb25lbnRcbiAgICovXG4gIHJlZ2lzdGVySW5zdGFuY2UoaW5zdGFuY2U6IEFuZ3VsYXJQYWdpbmF0b3JJbnN0YW5jZSk6IHZvaWQge1xuXG4gICAgaWYgKCF0aGlzLmluc3RhbmNlc1tpbnN0YW5jZS5pZF0pIHtcbiAgICAgIHRoaXMuaW5zdGFuY2VzW2luc3RhbmNlLmlkXSA9IGluc3RhbmNlO1xuICAgICAgdGhpcy5jaGFuZ2UuZW1pdChpbnN0YW5jZS5pZCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGNvbnN0IGNoYW5nZWQgPSB0aGlzLnVwZGF0ZUluc3RhbmNlKGluc3RhbmNlKTtcbiAgICAgIGlmIChjaGFuZ2VkKSB7XG4gICAgICAgIHRoaXMuY2hhbmdlLmVtaXQoaW5zdGFuY2UuaWQpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybjtcbiAgfVxuXG4gIC8qKlxuICAgKiB1cGRhdGVzIGV4aXN0aW5nIHBhZ2luYXRpb24gaW5zdGFuY2VzIGF2YWlsYWJsZVxuICAgKiBhbmQgcmV0dXJucyB0cnVlIGlmIHZhbHVlIGhhcyBjaGFuZ2VkXG4gICAqXG4gICAqIEBwYXJhbSBpbnN0YW5jZSBhbiB1bmlxdWUgcGFnaW5hdGlvbiBjb21wb25lbnRcbiAgICovXG4gIHVwZGF0ZUluc3RhbmNlKGluc3RhbmNlOiBBbmd1bGFyUGFnaW5hdG9ySW5zdGFuY2UpOiBib29sZWFuIHtcblxuICAgIGZvciAoY29uc3Qga2V5IGluIGluc3RhbmNlKSB7XG4gICAgICBpZiAoaW5zdGFuY2Vba2V5XSAhPT0gdGhpcy5pbnN0YW5jZXNbaW5zdGFuY2UuaWRdW2tleV0pIHtcbiAgICAgICAgdGhpcy5pbnN0YW5jZXNbaW5zdGFuY2UuaWRdW2tleV0gPSBpbnN0YW5jZVtrZXldO1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICAvKipcbiAgICogcmV0dXJuIGluc3RhbmNlIHdpdGggZ2l2ZW4gaWRcbiAgICpcbiAgICogQHBhcmFtIGlkIHVuaXF1ZSBpZCBvZiB0aGUgcGFnaW5hdGlvbiBjb21wb25lbnRcbiAgICovXG4gIGdldEluc3RhbmNlKGlkOiBzdHJpbmcpOiBhbnkge1xuICAgIHJldHVybiB0aGlzLmluc3RhbmNlc1tpZF07XG4gIH1cblxuICAvKipcbiAgICogcmV0dXJuIGN1cnJlbnRQYWdlIGZvciBnaXZlbiBpZFxuICAgKlxuICAgKiBAcGFyYW0gaWQgdW5pcXVlIGlkIG9mIHRoZSBwYWdpbmF0aW9uIGNvbXBvbmVudFxuICAgKi9cbiAgZ2V0Q3VycmVudFBhZ2UoaWQ6IHN0cmluZyk6IG51bWJlciB7XG4gICAgcmV0dXJuIHRoaXMuaW5zdGFuY2VzW2lkXS5jdXJyZW50UGFnZTtcbiAgfVxufVxuIl19